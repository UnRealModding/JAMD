import net.minecraftforge.gradle.common.util.ModConfig

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

apply from: 'https://files.saps.dev/ci/git-md-changelog.gradle'

def ENV = System.getenv()

archivesBaseName = project.archives_base_name
version = "${mod_version}-build.${ENV.GITHUB_RUN_NUMBER ?: 9999}+mc${minecraft_version}"
group = 'com.unrealdinnerbone'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: project.minecraft_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    ModConfig projectMod = new ModConfig(project, project.getName());
    projectMod.sources(project.sourceSets.main)

    runs {
        client {
            workingDirectory project.file('run')
            mods.add(projectMod)
        }

        server {
            workingDirectory project.file('run')
            mods.add(projectMod)
        }

        data {
            workingDirectory project.file('data')
            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods.add(projectMod)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:' + project.minecraft_version + '-' + project.forge_version
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : "UnRealDinnerbone",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "UnRealDinnerbone",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            artifact(jar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
        }
    }


    repositories {
        if (ENV.NANITE_DEPLOY) {
            maven {
                url "https://maven.nanite.dev/"
                credentials {
                    username = "unrealdinnerbone"
                    password = "${ENV.NANITE_DEPLOY}"
                }
            }
        }
    }
}

if (ENV.CURSE_DEPLOY) {
    curseforge {
        apiKey = ENV.CURSE_DEPLOY
        project {
            id = project.curseforge_id
            releaseType = project.release_type
            addGameVersion "Forge"
            addGameVersion project.minecraft_version
            mainArtifact(jar)
            changelog = getGitChangelog()
            changelogType = 'markdown'
        }
    }
}
